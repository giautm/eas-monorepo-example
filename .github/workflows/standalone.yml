name: standalone
on:
  workflow_dispatch:
    inputs:
      app:
        description: App to build (ejected/managed)
        required: true
        default: managed
      platform:
        description: Platform to build for (android/ios)
        required: true
        default: all
      profile:
        description: EAS build profile (local/store)
        required: true
        default: local
      os:
        description: OS to build from (ubuntu/macos/windows)
        required: true
        default: ubuntu
      debug:
        description: Run in debug mode? (true/false)
        required: false
        default: false
jobs:
  build:
    name: Install and build
    runs-on: ${{ github.event.inputs.os }}-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Find cache
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile --check-files
      - name: Restore iOS credentials
        uses: actions/github-script@v3
        if: contains('ios all', github.event.inputs.platform)
        env:
          EXPO_CREDENTIALS_EJECTED: ${{ secrets.EXPO_CREDENTIALS_EJECTED }}
          EXPO_CREDENTIALS_MANAGED: ${{ secrets.EXPO_CREDENTIALS_MANAGED }}
          EXPO_DEBUG: ${{ github.event.inputs.debug }}
        with:
          script: |
            const fs = require('fs')
            const path = require('path')
            const env = 'EXPO_CREDENTIALS_' + context.payload.inputs.app.toUpperCase()
            console.log('Writing credentials from:', env)
            JSON.parse(process.env[env]).forEach(target => {
              fs.mkdirSync(path.dirname(target.file), { recursive: true })
              fs.writeFileSync(target.file, Buffer.from(target.code, 'base64'))
              console.log('  -', target.file);
            })
      - name: Start EAS build
        working-directory: apps/${{ github.event.inputs.app }}
        run: npx eas-cli build --non-interactive --wait --platform=${{ github.event.inputs.platform }} --profile=${{ github.event.inputs.profile }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
